{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { Observable } from 'rxjs';\nlet HomeComponent = class HomeComponent {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.username = 'sam_smith';\n    this.password = 'PASSword!234';\n    this.products$ = new Observable();\n    this.cart = {\n      cartItems: []\n    };\n    this.cartTotal = 0;\n  }\n  login() {\n    const userLoginModel = {\n      username: this.username,\n      password: this.password\n    };\n    this.http.post(this.baseUrl + 'user/login', userLoginModel).subscribe(result => {\n      this.signInSuccess = result;\n      if (this.signInSuccess) this.products$ = this.getProducts();\n    }, error => console.error(error));\n  }\n  addToCart(product) {\n    this.cart.cartItems.push({\n      productId: product.id,\n      name: product.name,\n      code: product.code,\n      price: product.price,\n      volumeDiscountQuantity: product.volumeDiscountQuantity\n    });\n    this.cartTotal = 0;\n  }\n  removeFromCart(idx) {\n    this.cart.cartItems.splice(idx, 1);\n    this.cartTotal = 0;\n  }\n  clearCart() {\n    this.cart.cartItems = [];\n    this.cartTotal = 0;\n  }\n  calculateTotal() {\n    this.http.post(this.baseUrl + 'cart/calculateTotal', this.cart).subscribe(result => {\n      this.cartTotal = result;\n    }, error => console.error(error));\n  }\n  getProducts() {\n    return this.http.get(this.baseUrl + 'product');\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html'\n}), __param(1, Inject('BASE_URL'))], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"mappings":";AACA,SAASA,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAGjD,SAASC,UAAU,QAAQ,MAAM;AAO1B,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAQxBC,YAA6BC,IAAgB,EAAuCC,OAAe;IAAtE,SAAI,GAAJD,IAAI;IAAmD,YAAO,GAAPC,OAAO;IAPpF,aAAQ,GAAW,WAAW;IAC9B,aAAQ,GAAW,cAAc;IAEjC,cAAS,GAAmC,IAAIJ,UAAU,EAAsB;IAChF,SAAI,GAAkB;MAAEK,SAAS,EAAE;IAAE,CAAmB;IACxD,cAAS,GAAG,CAAC;EAIpB;EAEOC,KAAK;IACV,MAAMC,cAAc,GAAuB;MACzCC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,QAAQ,EAAE,IAAI,CAACA;KAChB;IAED,IAAI,CAACN,IAAI,CAACO,IAAI,CAAU,IAAI,CAACN,OAAO,GAAG,YAAY,EAAEG,cAAc,CAAC,CAACI,SAAS,CAACC,MAAM,IAAG;MACtF,IAAI,CAACC,aAAa,GAAGD,MAAM;MAE3B,IAAI,IAAI,CAACC,aAAa,EACpB,IAAI,CAACC,SAAS,GAAG,IAAI,CAACC,WAAW,EAAE;IACvC,CAAC,EAAEC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAEOE,SAAS,CAACC,OAAyB;IACxC,IAAI,CAACC,IAAI,CAACf,SAAS,CAACgB,IAAI,CAAC;MACvBC,SAAS,EAAEH,OAAO,CAACI,EAAE;MACrBC,IAAI,EAAEL,OAAO,CAACK,IAAI;MAClBC,IAAI,EAAEN,OAAO,CAACM,IAAI;MAClBC,KAAK,EAAEP,OAAO,CAACO,KAAK;MACpBC,sBAAsB,EAAER,OAAO,CAACQ;KACjC,CAAC;IAEF,IAAI,CAACC,SAAS,GAAG,CAAC;EACpB;EAEOC,cAAc,CAACC,GAAW;IAC/B,IAAI,CAACV,IAAI,CAACf,SAAS,CAAC0B,MAAM,CAACD,GAAG,EAAE,CAAC,CAAC;IAElC,IAAI,CAACF,SAAS,GAAG,CAAC;EACpB;EAEOI,SAAS;IACd,IAAI,CAACZ,IAAI,CAACf,SAAS,GAAG,EAAE;IAExB,IAAI,CAACuB,SAAS,GAAG,CAAC;EACpB;EAEOK,cAAc;IACnB,IAAI,CAAC9B,IAAI,CAACO,IAAI,CAAS,IAAI,CAACN,OAAO,GAAG,qBAAqB,EAAE,IAAI,CAACgB,IAAI,CAAC,CAACT,SAAS,CAACC,MAAM,IAAG;MACzF,IAAI,CAACgB,SAAS,GAAGhB,MAAM;IACzB,CAAC,EAAEI,KAAK,IAAIC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC;EACnC;EAEQD,WAAW;IACjB,OAAO,IAAI,CAACZ,IAAI,CAAC+B,GAAG,CAAqB,IAAI,CAAC9B,OAAO,GAAG,SAAS,CAAC;EACpE;CACD;AA3DYH,aAAa,eAJzBH,SAAS,CAAC;EACTqC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE;CACd,CAAC,EASgDC,iBAAM,CAAC,UAAU,CAAC,IARvDpC,aAAa,CA2DzB;SA3DYA,aAAa","names":["Component","Inject","Observable","HomeComponent","constructor","http","baseUrl","cartItems","login","userLoginModel","username","password","post","subscribe","result","signInSuccess","products$","getProducts","error","console","addToCart","product","cart","push","productId","id","name","code","price","volumeDiscountQuantity","cartTotal","removeFromCart","idx","splice","clearCart","calculateTotal","get","selector","templateUrl","__param"],"sourceRoot":"","sources":["C:\\Users\\zoxma\\source\\repos\\AlliantShoppingCart\\AlliantShoppingCart.Web\\ClientApp\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, Inject } from '@angular/core';\r\nimport { UserLoginViewModel } from '../models/user-login.model';\r\nimport { ProductViewModel } from '../models/product.model';\r\nimport { Observable } from 'rxjs';\r\nimport { CartViewModel } from '../models/cart.model';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n  public username: string = 'sam_smith';\r\n  public password: string = 'PASSword!234';\r\n  public signInSuccess?: boolean;\r\n  public products$: Observable<ProductViewModel[]> = new Observable<ProductViewModel[]>();\r\n  public cart: CartViewModel = { cartItems: [] } as CartViewModel;\r\n  public cartTotal = 0;\r\n\r\n  constructor(private readonly http: HttpClient, @Inject('BASE_URL') private readonly baseUrl: string) {\r\n\r\n  }\r\n\r\n  public login() {\r\n    const userLoginModel: UserLoginViewModel = {\r\n      username: this.username,\r\n      password: this.password\r\n    };\r\n\r\n    this.http.post<boolean>(this.baseUrl + 'user/login', userLoginModel).subscribe(result => {\r\n      this.signInSuccess = result;\r\n\r\n      if (this.signInSuccess)\r\n        this.products$ = this.getProducts();\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  public addToCart(product: ProductViewModel) {\r\n    this.cart.cartItems.push({\r\n      productId: product.id,\r\n      name: product.name,\r\n      code: product.code,\r\n      price: product.price,\r\n      volumeDiscountQuantity: product.volumeDiscountQuantity\r\n    });\r\n\r\n    this.cartTotal = 0;\r\n  }\r\n\r\n  public removeFromCart(idx: number) {\r\n    this.cart.cartItems.splice(idx, 1);\r\n\r\n    this.cartTotal = 0;\r\n  }\r\n\r\n  public clearCart() {\r\n    this.cart.cartItems = [];\r\n\r\n    this.cartTotal = 0;\r\n  }\r\n\r\n  public calculateTotal() {\r\n    this.http.post<number>(this.baseUrl + 'cart/calculateTotal', this.cart).subscribe(result => {\r\n      this.cartTotal = result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  private getProducts(): Observable<ProductViewModel[]> {\r\n    return this.http.get<ProductViewModel[]>(this.baseUrl + 'product');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}