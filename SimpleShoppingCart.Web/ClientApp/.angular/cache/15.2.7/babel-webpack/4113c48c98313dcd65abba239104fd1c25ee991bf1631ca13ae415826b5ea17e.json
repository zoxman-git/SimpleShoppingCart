{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nlet HomeComponent = class HomeComponent {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.username = 'sam_smith';\n    this.password = 'PASSword!234';\n    this.products = [];\n    //public products$: Observable<ProductViewModel[]> = new Observable<ProductViewModel[]>();\n    this.cart = {\n      cartItems: []\n    };\n    this.cartTotal = 0;\n  }\n  login() {\n    const userLoginModel = {\n      username: this.username,\n      password: this.password\n    };\n    this.http.post(this.baseUrl + 'user/login', userLoginModel).subscribe(result => {\n      this.signInSuccess = result;\n      if (this.signInSuccess) this.getProducts().subscribe(result => {\n        this.products = result;\n      }, error => console.error(error));\n      //this.products$ = this.getProducts();\n    }, error => console.error(error));\n  }\n  addToCart(product) {\n    this.cart.cartItems.push({\n      productId: product.id,\n      name: product.name,\n      code: product.code,\n      price: product.price,\n      volumeDiscountQuantity: product.volumeDiscountQuantity,\n      volumeDiscountPrice: product.volumeDiscountPrice\n    });\n    this.cartTotal = 0;\n  }\n  addToCartByProductCodes(productCodes) {\n    this.cart.cartItems = [];\n    for (let i = 0; i < productCodes.length; i++) {\n      let code = productCodes.charAt(i);\n      let product = this.products.find(x => x.code === code);\n      this.cart.cartItems.push({\n        productId: product.id,\n        name: product.name,\n        code: product.code,\n        price: product.price,\n        volumeDiscountQuantity: product.volumeDiscountQuantity,\n        volumeDiscountPrice: product.volumeDiscountPrice\n      });\n    }\n    this.cartTotal = 0;\n  }\n  removeFromCart(idx) {\n    this.cart.cartItems.splice(idx, 1);\n    this.cartTotal = 0;\n  }\n  clearCart() {\n    this.cart.cartItems = [];\n    this.cartTotal = 0;\n  }\n  calculateTotal() {\n    this.http.post(this.baseUrl + 'cart/calculateTotal', this.cart).subscribe(result => {\n      this.cartTotal = result;\n    }, error => console.error(error));\n  }\n  getProducts() {\n    return this.http.get(this.baseUrl + 'product');\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html'\n}), __param(1, Inject('BASE_URL'))], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"mappings":"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","names":["Component","Inject","HomeComponent","constructor","http","baseUrl","cartItems","login","userLoginModel","username","password","post","subscribe","result","signInSuccess","getProducts","products","error","console","addToCart","product","cart","push","productId","id","name","code","price","volumeDiscountQuantity","volumeDiscountPrice","cartTotal","addToCartByProductCodes","productCodes","i","length","charAt","find","x","removeFromCart","idx","splice","clearCart","calculateTotal","get","selector","templateUrl","__param"],"sourceRoot":"","sources":["C:\\Users\\zoxma\\source\\repos\\AlliantShoppingCart\\AlliantShoppingCart.Web\\ClientApp\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Component, Inject } from '@angular/core';\r\nimport { UserLoginViewModel } from '../models/user-login.model';\r\nimport { ProductViewModel } from '../models/product.model';\r\nimport { Observable } from 'rxjs';\r\nimport { CartViewModel } from '../models/cart.model';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n})\r\nexport class HomeComponent {\r\n  public username: string = 'sam_smith';\r\n  public password: string = 'PASSword!234';\r\n  public signInSuccess?: boolean;\r\n  public products: ProductViewModel[] = [];\r\n  //public products$: Observable<ProductViewModel[]> = new Observable<ProductViewModel[]>();\r\n  public cart: CartViewModel = { cartItems: [] } as CartViewModel;\r\n  public cartTotal = 0;\r\n\r\n  constructor(private readonly http: HttpClient, @Inject('BASE_URL') private readonly baseUrl: string) {\r\n\r\n  }\r\n\r\n  public login() {\r\n    const userLoginModel: UserLoginViewModel = {\r\n      username: this.username,\r\n      password: this.password\r\n    };\r\n\r\n    this.http.post<boolean>(this.baseUrl + 'user/login', userLoginModel).subscribe(result => {\r\n      this.signInSuccess = result;\r\n\r\n      if (this.signInSuccess)\r\n        this.getProducts().subscribe(result => {\r\n          this.products = result;\r\n        }, error => console.error(error));\r\n\r\n      //this.products$ = this.getProducts();\r\n\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  public addToCart(product: ProductViewModel) {\r\n    this.cart.cartItems.push({\r\n      productId: product.id,\r\n      name: product.name,\r\n      code: product.code,\r\n      price: product.price,\r\n      volumeDiscountQuantity: product.volumeDiscountQuantity,\r\n      volumeDiscountPrice: product.volumeDiscountPrice\r\n    });\r\n\r\n    this.cartTotal = 0;\r\n  }\r\n\r\n  public addToCartByProductCodes(productCodes: string) {\r\n    this.cart.cartItems = [];\r\n\r\n    for (let i = 0; i < productCodes.length; i++) {\r\n      let code = productCodes.charAt(i);\r\n\r\n      let product = this.products.find(x => x.code === code) as ProductViewModel;\r\n\r\n      this.cart.cartItems.push({\r\n        productId: product.id,\r\n        name: product.name,\r\n        code: product.code,\r\n        price: product.price,\r\n        volumeDiscountQuantity: product.volumeDiscountQuantity,\r\n        volumeDiscountPrice: product.volumeDiscountPrice\r\n      });\r\n    }\r\n\r\n    this.cartTotal = 0;\r\n  }\r\n\r\n  public removeFromCart(idx: number) {\r\n    this.cart.cartItems.splice(idx, 1);\r\n\r\n    this.cartTotal = 0;\r\n  }\r\n\r\n  public clearCart() {\r\n    this.cart.cartItems = [];\r\n\r\n    this.cartTotal = 0;\r\n  }\r\n\r\n  public calculateTotal() {\r\n    this.http.post<number>(this.baseUrl + 'cart/calculateTotal', this.cart).subscribe(result => {\r\n      this.cartTotal = result;\r\n    }, error => console.error(error));\r\n  }\r\n\r\n  private getProducts(): Observable<ProductViewModel[]> {\r\n    return this.http.get<ProductViewModel[]>(this.baseUrl + 'product');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}